  my <- combine(months, years)
my
combine <- function(mat, vec, name){#
	combined <- mat[rep(1:nrow(mat), each = length(vec)),]#
	combined <- cbind(unname(combined), sep = rep(vec, nrow(mat)))#
	combined#
}
  my <- combine(months, years)
my
  dmy <- combine(dm, days)
  dmy <- combine(my, days)
dmy
  dmy <- combine(combine(months,years), days)
dmy
?mlply
permute <- function(...){#
	data <- unlist(list(...))#
#
	# Creates grid of all unique combinations of data elements with #
	# length = length(data). 	#
	perms <- splat(expand.grid)(rep(list(seq_along(data)), length(data)))#
	#
	# Retains only combinations that sample each element once#
	perms <- perms[apply(perms, 1, function(x) nlevels(as.factor(x))) == length(data), ]#
	#
	# Replaces each element with its value from data#
	perm_strings <- sapply(perms, function(x) data[x])#
	perm_strings#
}
  mlply(dmy, permute)
  unlist(mlply(dmy, permute))
permute(dmy[1,])
unlist(permute(dmy[1,]))
str(permute(dmy[1,]))
unname(dmy)
  mlply(unname(dmy), permute))
  mlply(unname(dmy), permute)
  unlist(mlply(unname(dmy), permute))
try <- list("a", "b", "c")
rbind(try)
try
cbind(try)
test <- list(dmy[1,], dmy[2,], dmy[3,])
test
rbind(test)
str(rbind(test))
as.matrix(rbind(test))
str(test)
try
rbind(test, stringsAsFactors = F)
rbind(test, stringsAsFactors = T)
  mmply(unname(dmy), permute)
  maply(unname(dmy), permute)
?rbind
rbind(test, deparse.level = 0)
  dmy <- unname(combine(combine(months,years), days))
dmy
  splat(rbind)(mlply(dmy,permute))
432/72
  perms <- unname(splat(rbind)(mlply(dmy,permute)))
head(perms)
is.matrix(perms)
with_seps <- combine(perms, seps)
is.matrix(with_seps)
with_seps
fmts1 <- unname(unlist(mlply(with_seps, paste)))
fmts1
lower = c("iii", "vi", "mmiii")#
upper = c("III", "VI", "MMIII")
lows <- permute(lower)
ups <- permute(upper)
lows
ups
romans <- rbind(permute(lower), permute(upper))
romans
is.matrix(lows)
permute <- function(...){#
	data <- unlist(list(...))#
#
	# Creates grid of all unique combinations of data elements with #
	# length = length(data). 	#
	perms <- splat(expand.grid)(rep(list(seq_along(data)), length(data)))#
	#
	# Retains only combinations that sample each element once#
	perms <- perms[apply(perms, 1, function(x) nlevels(as.factor(x))) == length(data), ]#
	#
	# Replaces each element with its value from data#
	perm_strings <- unname(sapply(perms, function(x) data[x]))#
	perm_strings#
}
lows <- permute(lower)
lows
is.matrix(lows)
romans <- rbind(permute(lower), permute(upper))
romans
with_seps <- combine(romans, seps)
fmts2 <- unlist(mlply(with_seps, paste))
fmts2
test_dates <- c(fmts1, fmts2)
test_dates
rnorm(1,1,1)
?names
library(plyr)
?mlply
install.packages("plyr")
library(plyr)
z
as.POSIXlt(z)$sec
as.POSIXlt(z, origin = "1970-01-01")$sec
as.POSIXlt(z, origin = "1970-01-01")$pm
?as.POSIXlt
misc <- c("the 6th day of August in the year of our Lord 2003",#
"the 6th of August 2003",#
"August, 6 2003 BC",#
"August, 6 2003 BCE",#
"August, 6 2003 AC",#
"August, 6 2003 CE",#
"August, 6 2003 AD",#
"1060146000", # the POSIXct number for Aug 6, 2003)
)
nj)
misc <- c("the 6th day of August in the year of our Lord 2003",#
"the 6th of August 2003",#
"August, 6 2003 BC",#
"August, 6 2003 BCE",#
"August, 6 2003 AC",#
"August, 6 2003 CE",#
"August, 6 2003 AD",#
"1060146000" # the POSIXct number for Aug 6, 2003#
)
misc
31+28+31+30+31+30+31+6
z
weekdays(z)
?weekdays
?as.Date
qf <- read.csv(file.choose())
head(qf)
str(qf)
subset(qf, state == 48)
subset(qf, state == 48 & county == 201)
?rev
rev(c(1:5))
?order
rev(c("a", "b", "c"))
?match
help(package=foreign)
help(package=chron)
help(package=plyr)
dput(names(qf))
summary(qf)
qplot(pop00, pop08, data = qf)
library(ggplot2)
qplot(pop00, pop08, data = qf)
install.packages("ggplot2")
library(ggplot2)
qplot(pop00, pop08, data = qf)
dput(names(qf))
qplot(area, pop08, data = qf)
qplot(log10(area), log10(pop08), data = qf)
dev.new()
corr(qf)
?correlation
??correlation
?corr
??correlation
cor(qf)
?cor
cor(qf$houses_new_value, qf)
> cor(qf$houses_new_value, qf)[> cor(qf$houses_new_value, qf),]
> cor(qf$houses_new_value, qf)[ cor(qf$houses_new_value, qf) > 0.5,]
> cor(qf$houses_new_value, qf)[ cor(qf$houses_new_value, qf) >= 0.5,]
cor(qf$houses_new_value, qf)[ cor(qf$houses_new_value, qf) >= 0.5,]
cor(qf$houses_new_value, qf)[ cor(qf$houses_new_value, qf) > 0.5,]
a <- cor(qf$houses_new_value, qf)
a[a > .5]
a
str(a)
is.list(a)
is.vector(a)
is.dataframe(a)
is.data.frame(a)
is.matrix(a)
names(a)
a[a > .5]
a[,a > .5]
a <- cor(qf$houses_new_value, qf, method = "spearman")
a[,a > .5]
dput(col.names(a[,a > .5]))
dput(colnames(a[,a > .5]))
colnames(a[,a > .5])
colnames(a)
colnames(a)[which(a > .5)]
dput(colnames(a)[which(a > .5)])
a <- cor(qf$houses_new_value/qf$houses_new, qf, method = "spearman")
a[,a > .5]
a
b <- with(qf, houses_new_value/houses_new)
b
a <- cor(b, qf, method = "spearman")
a
a <- cor(b, qf, method = "spearman", na.rm = T)
which(qf$houses_new == 0)
a <- cor(b, qf, na.rm = T, method = "spearman")
a <- cor(b, qf, use = pairwise, method = "spearman")
a <- cor(b, qf, use = "pairwise", method = "spearman")
a[,a > .5]
a
a[,a > .3]
a[,abs(a) > .3]
dput(colnames(a)[which(abs(a) > .3)])
dput(names(qf))
qplot(pop_black_perc, racial_f, data = qf)
qplot(pop_black_perc, firms_black_perc, data = qf)
within(qf, firms_black_perc <- firms_black / firms)
qplot(pop_black_perc, firms_black_perc, data = qf)
q <- within(qf, firms_black_perc <- firms_black / firms)
qplot(pop_black_perc, firms_black_perc, data = q)
qplot(pop_black_perc, firms_black_perc, data = q, colour = log10(pop08))
q <- within(qf, firms_black_perc <- firms_black / firms,#
color <- cutnumber(log10(pop08), 4))
qplot(pop_black_perc, firms_black_perc, data = q, colour = color)
q$color
q <- within(qf, firms_black_perc <- firms_black / firms, color <- cutnumber(log10(pop08), 4))
qplot(pop_black_perc, firms_black_perc, data = q, colour = color)
q <- within(qf, firms_black_perc <- firms_black / firms, #
color <- cutnumber(pop08, 4))
q$color
q <- within(qf, {#
	firms_black_perc <- firms_black / firms, #
	color <- cutnumber(log10(pop08), 4)#
})
q <- within(qf, {#
	firms_black_perc <- firms_black / firms, #
	color <- cut_number(log10(pop08), 4)#
})
q <- within(qf, {#
	firms_black_perc <- firms_black / firms, #
	color <- cut_number(log10(pop_08), 4)#
})
q <- within(qf, {#
	firms_black_perc <- firms_black / firms #
	color <- cut_number(log10(pop08), 4)#
})
qplot(pop_black_perc, firms_black_perc, data = q, colour = color)
q <- within(qf, {#
	firms_black_perc <- firms_black / firms #
	color <- cut_number(log10(pop08), 5)#
})
qplot(pop_black_perc, firms_black_perc, data = q, colour = color)
theme_get()
theme_update(panel.background = theme_rect(fill = "grey70"))
qplot(pop_black_perc, firms_black_perc, data = q, colour = color)
theme_update(panel.background = theme_rect(fill = "grey80"))
qplot(pop_black_perc, firms_black_perc, data = q, colour = color)
theme_update(panel.background = theme_rect(fill = "grey90"))
qplot(pop_black_perc, firms_black_perc, data = q, colour = color)
theme_update(panel.background = theme_rect(fill = "grey90", colour = NA))
qplot(pop_black_perc, firms_black_perc, data = q, colour = color)
theme_update(panel.background = theme_rect(fill = "grey95", colour = NA))
qplot(pop_black_perc, firms_black_perc, data = q, colour = color)
theme_update(panel.background = theme_rect(fill = "grey90", colour = NA))
qplot(pop_black_perc, firms_black_perc, data = q, colour = color)
dput(colnames(a)[which(abs(a) > .3)])
qplot(pop08, data = qf)
qplot(log10(pop08), data = qf)
qplot(log10(pop08), data = qf, binwidth = .1)
qplot(log10(pop08), data = qf, binwidth = .17)
qplot(log10(pop08), data = qf, binwidth = .17, color = log10(pop00))
qplot(log10(pop08), data = qf, binwidth = .17, colour = log10(pop00))
dput(names(qf))
qplot(unemploy, data = qf, binwidth = 10, facet = ~ state)
qplot(log10(unemploy), data = qf, binwidth = 10, facet = ~ state)
qplot(log10(unemploy), data = qf, binwidth = .5, facet = ~ state)
qplot(log10(unemploy), data = qf, binwidth = .5, facets = ~ state)
qplot(log10(unemploy), ..density.., data = qf, binwidth = .5, facets = ~ state, geom = "histogram")
qplot(log10(unemploy), ..density.., data = qf, binwidth = .5, group = state, geom = "freqpoly")
qplot(log10(unemploy), ..density.., data = qf, binwidth = .1, group = state, geom = "freqpoly")
qplot(log10(unemploy), ..density.., data = qf, binwidth = .2, color = state, geom = "freqpoly")
qplot(log10(unemploy), ..density.., data = qf, binwidth = .2, colour = state, geom = "freqpoly")
qplot(log10(unemploy), ..density.., data = qf, binwidth = .2, group = state, geom = "freqpoly")
z
attr(z, "class")
z + 1
z + 60
?attr
seconds <- function(x) x * 1
z + seconds(3)
60*60
3600 * 24
86400 * 7
?ISOdatetime
seconds <- function(x = 1) {#
	sec <- x * 1#
	class(sec) <- "duration"#
	sec#
	}
y <- seconds(1)
class(y)
class(seconds(1))
3.5*12
?base::+.Date
+.Date
+.date
+
l
,
?+
.
+.
+
.
.
l
.
>
base::'+.Date'
