
R version 2.12.0 (2010-10-15)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-apple-darwin9.8.0/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "lubridate"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('lubridate')
Overriding + and - methods for POSIXt, Date and difftime
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("DateUpdate")
> ### * DateUpdate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DateUpdate
> ### Title: Changes the components of a date object...
> ### Aliases: DateUpdate
> ### Keywords: manip chron
> 
> ### ** Examples
> date <- as.POSIXlt("2009-02-10") 
> update(date, year = 2010, month = 1, mday = 1)
[1] "2010-01-01 CST"
> # "2010-01-01 CST"
> 
> update(date, year =2010, month = 13, mday = 1)
[1] "2011-01-01 CST"
> # "2011-01-01 CST"
> 
> update(date, minute = 10, second = 3)
[1] "2009-02-10 00:10:03 CST"
> # "2009-02-10 00:10:03 CST"
> 
> 
> cleanEx()
> nameEx("am")
> ### * am
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: am
> ### Title: Does date time occur in the am or pm?
> ### Aliases: am pm
> ### Keywords: chron
> 
> ### ** Examples
> x <- now()
> am(x) 
[1] FALSE
> pm(x)
[1] TRUE
> 
> 
> cleanEx()
> nameEx("as.duration")
> ### * as.duration
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.duration
> ### Title: Change an object to a duration (difftime).
> ### Aliases: as.duration
> ### Keywords: classes manip methods chron
> 
> ### ** Examples
> span <- new_interval(ymd("2009-01-01"), ymd("2009-08-01")) #interval
> # 2009-01-01 -- 2009-08-01 
> as.duration(span)
[1] 18316800s (212d) 
> # 18316800s (212d)
> as.duration(10) # numeric
[1] 10s
> # 10s
> 
> 
> cleanEx()
> nameEx("as.interval")
> ### * as.interval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.interval
> ### Title: Change an object to an interval.
> ### Aliases: as.interval
> ### Keywords: classes manip methods chron
> 
> ### ** Examples
> diff <- new_difftime(days = 31) #difftime
> as.interval(diff, ymd("2009-01-01"))
[1] 2009-01-01 -- 2009-02-01 
> # 2009-01-01 -- 2009-02-01
> as.interval(diff, ymd("2009-02-01"))
[1] 2009-02-01 -- 2009-03-04 
> # 2009-02-01 -- 2009-03-04
> 
> dur <- new_duration(days = 31) #duration
> as.interval(dur, ymd("2009-01-01"))
[1] 2009-01-01 -- 2009-02-01 
> # 2009-01-01 -- 2009-02-01
> as.interval(dur, ymd("2009-02-01"))
[1] 2009-02-01 -- 2009-03-04 
> # 2009-02-01 -- 2009-03-04
> 
> per <- new_period(months = 1) #period
> as.interval(per, ymd("2009-01-01"))
[1] 2009-01-01 -- 2009-02-01 
> # 2009-01-01 -- 2009-02-01 
> as.interval(per, ymd("2009-02-01"))
[1] 2009-02-01 -- 2009-03-01 
> # 2009-02-01 -- 2009-03-01
> 
> as.interval(3600, ymd("2009-01-01")) #numeric
[1] 2009-01-01 -- 2009-01-01 01:00:00 
> # 2009-01-01 -- 2009-01-01 01:00:00
> 
> 
> cleanEx()
> nameEx("as.period")
> ### * as.period
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.period
> ### Title: Change an object to a period.
> ### Aliases: as.period
> ### Keywords: classes manip methods chron
> 
> ### ** Examples
> span <- new_interval(as.POSIXct("2009-01-01"), as.POSIXct("2010-02-02 01:01:01")) #interval
> # [1] 2009-01-01 -- 2010-02-02 01:01:01
> as.period(span)
[1] 1 year, 1 month, 1 day, 1 hour, 1 minute and 1 second 
> # 1 year, 1 month, 1 day, 1 hour, 1 minute and 1 second
> 
> 
> cleanEx()
> nameEx("ceiling_date")
> ### * ceiling_date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ceiling_date
> ### Title: Round date-times up.
> ### Aliases: ceiling_date
> ### Keywords: manip chron
> 
> ### ** Examples
> x <- as.POSIXct("2009-08-03 12:01:59.23")
> ceiling_date(x, "second")
[1] "2009-08-03 12:02:00 CDT"
> # "2009-08-03 12:02:00 CDT"
> ceiling_date(x, "minute")
[1] "2009-08-03 12:02:00 CDT"
> # "2009-08-03 12:02:00 CDT"
> ceiling_date(x, "hour")
[1] "2009-08-03 13:00:00 CDT"
> # "2009-08-03 13:00:00 CDT"
> ceiling_date(x, "day")
[1] "2009-08-04 CDT"
> # "2009-08-04 CDT"
> ceiling_date(x, "week")
[1] "2009-08-09 CDT"
> # "2009-08-09 CDT"
> ceiling_date(x, "month")
[1] "2009-09-01 CDT"
> # "2009-09-01 CDT"
> ceiling_date(x, "year")
[1] "2010-01-01 CST"
> # "2010-01-01 CST"
> 
> 
> cleanEx()
> nameEx("decimal_date")
> ### * decimal_date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: decimal_date
> ### Title: Converts a date to a decimal of its year.
> ### Aliases: decimal_date
> ### Keywords: manip chron methods
> 
> ### ** Examples
> date <- as.POSIXlt("2009-02-10")
> decimal_date(date)  # 2009.109
[1] 2009.110
> 
> 
> cleanEx()
> nameEx("dseconds")
> ### * dseconds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dseconds
> ### Title: Quickly create exact time spans.
> ### Aliases: eseconds eminutes ehours edays eweeks eyears dseconds dminutes
> ###   dhours ddays dweeks dyears dmilliseconds emilliseconds dmicroseconds
> ###   emicroseconds dnanoseconds enanoseconds dpicoseconds epicoseconds
> ### Keywords: chron manip
> 
> ### ** Examples
> dseconds(1) 
[1] 1s
> # 1s
> dminutes(3.5) 
[1] 210s
> # 210s
> 
> x <- as.POSIXct("2009-08-03") 
> # "2009-08-03 CDT"
> x + ddays(1) + dhours(6) + dminutes(30)
[1] "2009-08-04 06:30:00 CDT"
> # "2009-08-04 06:30:00 CDT"
> x + ddays(100) - dhours(8) 
[1] "2009-11-10 15:00:00 CST"
> # "2009-11-10 15:00:00 CST"
> 
> class(as.Date("2009-08-09") + ddays(1)) # retains Date class
[1] "Date"
> # "Date"
> as.Date("2009-08-09") + dhours(12) 
[1] "2009-08-09 12:00:00 UTC"
> # "2009-08-09 12:00:00 UTC"
> class(as.Date("2009-08-09") + dhours(12)) 
[1] "POSIXct" "POSIXt" 
> # "POSIXt"  "POSIXct"
> # converts to POSIXt class to accomodate time units
> 
> dweeks(1) - ddays(7) 
[1] 0s
> # 0s
> c(1:3) * dhours(1) 
[1]  3600s (1h)   7200s (2h)  10800s (3h) 
> # 3600s  7200s  10800s
> #
> # compare DST handling to durations
> boundary <- as.POSIXct("2009-03-08 01:59:59")
> # "2009-03-08 01:59:59 CST"
> boundary + days(1) # period
[1] "2009-03-09 01:59:59 CDT"
> # "2009-03-09 01:59:59 CDT" (clock time advances by a day)
> boundary + ddays(1) # duration
[1] "2009-03-09 02:59:59 CDT"
> # "2009-03-09 02:59:59 CDT" (clock time corresponding to 86400 seconds later)
> 
> 
> cleanEx()
> nameEx("dst")
> ### * dst
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dst
> ### Title: Get Daylight Savings Time indicator of a date-time.
> ### Aliases: dst
> ### Keywords: utilities chron methods
> 
> ### ** Examples
> x <- now()
> dst(x)
[1] 0
> 
> 
> cleanEx()
> nameEx("duration")
> ### * duration
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: duration
> ### Title: Description of time span classes in lubridate.
> ### Aliases: duration durations dur periods period interval intervals
> ###   timespans
> ### Keywords: classes chron
> 
> ### ** Examples
> new_duration(second = 3690)
[1] 3690s (1.02h) 
> # 3690s (1.02h)
> new_period(second = 3690)
[1] 3690 seconds
> # 3690 seconds
> new_period(second = 30, minute = 1, hour = 1)
[1] 1 hour, 1 minute and 30 seconds 
> # 1 hour, 1 minute and 30 seconds
> new_interval(ymd_hms("2009-08-09 13:01:30"), ymd_hms("2009-08-09 12:00:00"))
[1] 2009-08-09 12:00:00 -- 2009-08-09 13:01:30 
> # 2009-08-09 12:00:00 -- 2009-08-09 13:01:30
> 
> date <- as.POSIXct("2009-03-08 01:59:59") # DST boundary
> # "2009-03-08 01:59:59 CST"
> date + days(1)
[1] "2009-03-09 01:59:59 CDT"
> # "2009-03-09 01:59:59 CDT" periods preserve clock time
> date + edays(1)
[1] "2009-03-09 02:59:59 CDT"
> # "2009-03-09 02:59:59 CDT" durations preserve exact passage of time
> 
> date2 <- as.POSIXct("2000-02-29 12:00:00")
> date2 + years(1)
[1] "2001-03-01 12:00:00 CST"
> # "2001-02-28 12:00:00 CST" 
> # self corrects to most recent real day
> 
> date3 <- as.POSIXct("2009-01-31 01:00:00")
> date3 + c(0:11) * months(1)
 [1] "2009-01-31 01:00:00 CST" "2009-03-03 01:00:00 CST"
 [3] "2009-03-31 01:00:00 CDT" "2009-05-01 01:00:00 CDT"
 [5] "2009-05-31 01:00:00 CDT" "2009-07-01 01:00:00 CDT"
 [7] "2009-07-31 01:00:00 CDT" "2009-08-31 01:00:00 CDT"
 [9] "2009-10-01 01:00:00 CDT" "2009-10-31 01:00:00 CDT"
[11] "2009-12-01 01:00:00 CST" "2009-12-31 01:00:00 CST"
> # [1] "2009-01-31 01:00:00 CST" "2009-02-28 01:00:00 CST"
> # [3] "2009-03-31 01:00:00 CDT" "2009-04-30 01:00:00 CDT"
> # [5] "2009-05-31 01:00:00 CDT" "2009-06-30 01:00:00 CDT"
> # [7] "2009-07-31 01:00:00 CDT" "2009-08-31 01:00:00 CDT"
> # [9] "2009-09-30 01:00:00 CDT" "2009-10-31 01:00:00 CDT"
> #[11] "2009-11-30 01:00:00 CST" "2009-12-31 01:00:00 CST"
> 
> span <- date2 - date  #creates interval 
> # 2000-02-29 12:00:00 -- 2009-03-08 01:59:59
> span - days(294)
[1] 2000-02-29 12:00:00 -- 2008-05-18 01:59:59 
> # 2000-02-29 12:00:00 -- 2008-05-18 01:59:59
> span - ddays(294)
[1] 2000-02-29 12:00:00 -- 2008-05-18 02:59:59 
> # 2000-02-29 12:00:00 -- 2008-05-18 02:59:59
> 
> date <- as.POSIXct("2009-01-01 00:00:00") 
> # "2009-01-01 GMT"
> date + years(1)
[1] "2010-01-01 CST"
> # "2010-01-01 GMT"
> date - days(3) + hours(6)
[1] "2008-12-29 06:00:00 CST"
> # "2008-12-29 06:00:00 GMT"
> date + 3 * seconds(10)
[1] "2009-01-01 00:00:30 CST"
> # "2009-01-01 00:00:30 GMT"
> 
> months(6) + days(1)
[1] 6 months and 1 day 
> # 6 months and 1 day
> 
> 
> cleanEx()
> nameEx("floor_date")
> ### * floor_date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: floor_date
> ### Title: Round date-times down.
> ### Aliases: floor_date
> ### Keywords: manip chron
> 
> ### ** Examples
> x <- as.POSIXct("2009-08-03 12:01:59.23")
> floor_date(x, "second")
[1] "2009-08-03 12:01:59 CDT"
> # "2009-08-03 12:01:59 CDT"
> floor_date(x, "minute")
[1] "2009-08-03 12:01:00 CDT"
> # "2009-08-03 12:01:00 CDT"
> floor_date(x, "hour")
[1] "2009-08-03 12:00:00 CDT"
> # "2009-08-03 12:00:00 CDT"
> floor_date(x, "day")
[1] "2009-08-03 CDT"
> # "2009-08-03 CDT"
> floor_date(x, "week")
[1] "2009-08-02 CDT"
> # "2009-08-02 CDT"
> floor_date(x, "month")
[1] "2009-08-01 CDT"
> # "2009-08-01 CDT"
> floor_date(x, "year")
[1] "2009-01-01 CST"
> # "2009-01-01 CST"
> 
> 
> cleanEx()
> nameEx("force_tz")
> ### * force_tz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: force_tz
> ### Title: Replace time zone to create new date-time...
> ### Aliases: force_tz
> ### Keywords: chron manip
> 
> ### ** Examples
> x <- as.POSIXct("2009-08-07 00:00:01", tz = "America/New_york")
> force_tz(x, "GMT")
[1] "2009-08-07 00:00:01 GMT"
> # "2009-08-07 00:00:01 GMT"
> 
> 
> cleanEx()
> nameEx("hm")
> ### * hm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hm
> ### Title: Create a period with the specified number of hours and
> ###   minutes...
> ### Aliases: hm
> ### Keywords: period
> 
> ### ** Examples
> x <- c("09:10", "09:02", "1:10")
> hm(x)
[1] 9 hours and 10 minutes  9 hours and 2 minutes   1 hour and 10 minutes  
> # [1] 9 hours and 10 minutes   9 hours and 2 minutes   1 hour and 10 minutes
> hm("7 6")
[1] 7 hours and 6 minutes 
> # [1] 7 hours and 6 minutes
> hm("6,5")
[1] 6 hours and 5 minutes 
> # [1] 6 hours and 5 minutes
> 
> 
> cleanEx()
> nameEx("hms")
> ### * hms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hms
> ### Title: Create a period with the specified hours, minutes, and
> ###   seconds...
> ### Aliases: hms
> ### Keywords: period
> 
> ### ** Examples
> x <- c("09:10:01", "09:10:02", "09:10:03")
> hms(x)
[1] 9 hours, 10 minutes and 1 second   9 hours, 10 minutes and 2 seconds 
[3] 9 hours, 10 minutes and 3 seconds 
> # [1] 9 hours, 10 minutes and 1 second   9 hours, 10 minutes and 2 seconds   9 hours, 10 minutes and 3 seconds
> hms("7 6 5")
[1] 7 hours, 6 minutes and 5 seconds 
> # [1] 7 hours, 6 minutes and 5 seconds
> hms("7,6,5")
[1] 7 hours, 6 minutes and 5 seconds 
> # [1] 7 hours, 6 minutes and 5 seconds
> 
> 
> cleanEx()
> nameEx("hour")
> ### * hour
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hour
> ### Title: Get/set hours component of a date-time.
> ### Aliases: hour hour<-
> ### Keywords: utilities manip chron methods
> 
> ### ** Examples
> x <- now()
> hour(x)
[1] 13
> hour(x) <- 1
> hour(x) <- 61 
> hour(x) > 2
[1] TRUE
> 
> 
> cleanEx()
> nameEx("int_end")
> ### * int_end
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: int_end
> ### Title: Access and change the end date of an interval...
> ### Aliases: int_end int_end<-
> 
> ### ** Examples
> int <- new_interval(ymd("2001-01-01"), ymd("2002-01-01"))
> # 2001-01-01 -- 2002-01-01
> int_end(int)
[1] "2002-01-01 UTC"
> # "2002-01-01 UTC"
> int_end(int) <- ymd("2002-06-01")
> int
[1] 2001-06-01 -- 2002-06-01 
> # 2001-06-01 -- 2002-06-01
> 
> 
> cleanEx()
> nameEx("int_start")
> ### * int_start
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: int_start
> ### Title: Access and change the start date of an interval...
> ### Aliases: int_start int_start<-
> 
> ### ** Examples
> int <- new_interval(ymd("2001-01-01"), ymd("2002-01-01"))
> # 2001-01-01 -- 2002-01-01
> int_start(int)
[1] "2001-01-01 UTC"
> # "2001-01-01 UTC"
> int_start(int) <- ymd("2001-06-01")
> int
[1] 2001-06-01 -- 2002-06-01 
> # 2001-06-01 -- 2002-06-01
> 
> 
> cleanEx()
> nameEx("is.Date")
> ### * is.Date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.Date
> ### Title: Is x a Date object?
> ### Aliases: is.Date
> ### Keywords: logic chron
> 
> ### ** Examples
> is.Date(as.Date("2009-08-03")) # TRUE
[1] TRUE
> is.Date(difftime(now() + 5, now())) # FALSE
[1] FALSE
> 
> 
> cleanEx()
> nameEx("is.POSIXt")
> ### * is.POSIXt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.POSIXt
> ### Title: Is x a POSIXct or POSIXlt object?
> ### Aliases: is.POSIXt is.POSIXlt is.POSIXct
> ### Keywords: logic chron
> 
> ### ** Examples
> is.POSIXt(as.Date("2009-08-03")) # FALSE
[1] FALSE
> is.POSIXt(as.POSIXct("2009-08-03")) # TRUE
[1] TRUE
> 
> 
> cleanEx()
> nameEx("is.difftime")
> ### * is.difftime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.difftime
> ### Title: Is x a difftime object?
> ### Aliases: is.difftime
> ### Keywords: logic chron
> 
> ### ** Examples
> is.difftime(as.Date("2009-08-03")) # FALSE
[1] FALSE
> is.difftime(new_difftime(days = 12.4)) # TRUE
[1] TRUE
> 
> 
> cleanEx()
> nameEx("is.duration")
> ### * is.duration
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.duration
> ### Title: Is x a duration object?
> ### Aliases: is.duration
> ### Keywords: logic chron
> 
> ### ** Examples
> is.duration(as.Date("2009-08-03")) # FALSE
[1] FALSE
> is.duration(new_duration(days = 12.4)) # TRUE
[1] TRUE
> 
> 
> cleanEx()
> nameEx("is.instant")
> ### * is.instant
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.instant
> ### Title: Is x a date-time object?
> ### Aliases: instant instants is.instant timepoint is.timepoint
> ### Keywords: logic chron
> 
> ### ** Examples
> is.instant(as.Date("2009-08-03")) # TRUE
[1] TRUE
> is.timepoint(5) # FALSE
[1] FALSE
> 
> 
> cleanEx()
> nameEx("is.interval")
> ### * is.interval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.interval
> ### Title: Is x an interval object?
> ### Aliases: is.interval
> ### Keywords: logic chron
> 
> ### ** Examples
> is.interval(new_period(months= 1, days = 15)) # FALSE
[1] FALSE
> is.interval(new_interval(ymd(20090801), ymd(20090809))) # TRUE
[1] TRUE
> 
> 
> cleanEx()
> nameEx("is.period")
> ### * is.period
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.period
> ### Title: Is x a period object?
> ### Aliases: is.period
> ### Keywords: logic chron
> 
> ### ** Examples
> is.period(as.Date("2009-08-03")) # FALSE
[1] FALSE
> is.period(new_period(months= 1, days = 15)) # TRUE
[1] TRUE
> 
> 
> cleanEx()
> nameEx("is.timespan")
> ### * is.timespan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.timespan
> ### Title: Is x a length of time?
> ### Aliases: is.timespan
> ### Keywords: logic chron
> 
> ### ** Examples
> is.timespan(as.Date("2009-08-03")) # FALSE
[1] FALSE
> is.timespan(new_duration(second = 1)) # TRUE
[1] TRUE
> 
> 
> cleanEx()
> nameEx("leap_year")
> ### * leap_year
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: leap_year
> ### Title: Is a year a leap year?
> ### Aliases: leap_year
> ### Keywords: logic chron
> 
> ### ** Examples
> x <- as.Date("2009-08-02")
> leap_year(x) # FALSE
[1] FALSE
> leap_year(2009) # FALSE
[1] FALSE
> leap_year(2008) # TRUE
[1] TRUE
> leap_year(1900) # FALSE
[1] FALSE
> leap_year(2000) # TRUE
[1] TRUE
> 
> 
> cleanEx()
> nameEx("make_difftime")
> ### * make_difftime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_difftime
> ### Title: Makes a difftime object from a given number of seconds...
> ### Aliases: make_difftime
> ### Keywords: chron
> 
> ### ** Examples
> make_difftime(1)
Time difference of 1 secs
> make_difftime(60)
Time difference of 1 mins
> make_difftime(3600)
Time difference of 1 hours
> 
> 
> cleanEx()
> nameEx("minute")
> ### * minute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: minute
> ### Title: Get/set minutes component of a date-time.
> ### Aliases: minute minute<-
> ### Keywords: utilities manip chron methods
> 
> ### ** Examples
> x <- now()
> minute(x)
[1] 40
> minute(x) <- 1
> minute(x) <- 61 
> minute(x) > 2
[1] FALSE
> 
> 
> cleanEx()
> nameEx("month")
> ### * month
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: month
> ### Title: Get/set months component of a date-time.
> ### Aliases: month month<-
> ### Keywords: utilities manip chron methods
> 
> ### ** Examples
> x <- now()
> month(x) 
[1] 1
> month(x) <- 1  
> month(x) <- 13
> month(x) > 3
[1] FALSE
> 
> month(ymd(080101))
[1] 1
> # 1
> month(ymd(080101), label = TRUE)
[1] Jan
12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec
> # "January"
> month(ymd(080101), label = TRUE, abbr = TRUE)
[1] Jan
12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec
> # "Jan"
> month(ymd(080101) + months(0:11), label = TRUE, abbr = TRUE)
 [1] Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec
> # "Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec"
> 
> 
> cleanEx()
> nameEx("ms")
> ### * ms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ms
> ### Title: Create a period with the specified number of minutes and
> ###   seconds...
> ### Aliases: ms
> ### Keywords: period
> 
> ### ** Examples
> x <- c("09:10", "09:02", "1:10")
> ms(x)
[1] 9 minutes and 10 seconds  9 minutes and 2 seconds  
[3] 1 minute and 10 seconds  
> # [1] 9 minutes and 10 seconds   9 minutes and 2 seconds   1 minute and 10 seconds
> ms("7 6")
[1] 7 minutes and 6 seconds 
> # [1] 7 minutes and 6 seconds
> ms("6,5")
[1] 6 minutes and 5 seconds 
> # 6 minutes and 5 seconds
> 
> 
> cleanEx()
> nameEx("new_difftime")
> ### * new_difftime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: new_difftime
> ### Title: Create a difftime object.
> ### Aliases: new_difftime
> ### Keywords: chron classes
> 
> ### ** Examples
> new_difftime(second = 90)
Time difference of 1.5 mins
> # Time difference of 1.5 mins
> new_difftime(minute = 1.5)
Time difference of 1.5 mins
> # Time difference of 1.5 mins
> new_difftime(second = 3, minute = 1.5, hour = 2, day = 6, week = 1)
Time difference of 13.08441 days
> # Time difference of 1.869201 weeks
> new_difftime(hour = 1, minute = -60)
Time difference of 0 secs
> # Time difference of 0 secs
> new_difftime(day = -1)
Time difference of -1 days
> # Time difference of -1 days
> 
> 
> cleanEx()
> nameEx("new_duration")
> ### * new_duration
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: new_duration
> ### Title: Create a duration object.
> ### Aliases: new_duration
> ### Keywords: chron classes
> 
> ### ** Examples
> new_duration(second = 90)
[1] 90s
> # 90s
> new_duration(minute = 1.5)
[1] 90s
> # 90s
> new_duration(second = 3, minute = 1.5, hour = 2, day = 6, week = 1)
[1] 1130493s (13.08d) 
> # 1130493s (13.08d)
> new_duration(hour = 1, minute = -60)
[1] 0s
> # 0s
> new_duration(day = -1)
[1] -86400s (-1d) 
> # -86400s (-1d)
> 
> 
> cleanEx()
> nameEx("new_interval")
> ### * new_interval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: new_interval
> ### Title: Create an interval object.
> ### Aliases: new_interval
> ### Keywords: chron classes
> 
> ### ** Examples
> new_interval(ymd(20090201), ymd(20090101))
[1] 2009-01-01 -- 2009-02-01 
> # 2009-01-01 -- 2009-02-01 
> 
> date1 <- as.POSIXct("2009-03-08 01:59:59")
> date2 <- as.POSIXct("2000-02-29 12:00:00")
> new_interval(date2, date1)
[1] 2000-02-29 12:00:00 -- 2009-03-08 01:59:59 
> # 2000-02-29 12:00:00 -- 2009-03-08 01:59:59
> new_interval(date1, date2)
[1] 2000-02-29 12:00:00 -- 2009-03-08 01:59:59 
> # 2000-02-29 12:00:00 -- 2009-03-08 01:59:59
> 
> span <- new_interval(ymd(20090201), ymd(20090101))
> # [1] 2009-01-01 -- 2009-02-01 
> span - days(30)
[1] 2009-01-01 -- 2009-01-02 
> # 2009-01-01 -- 2009-01-02
> span + months(6)
[1] 2009-01-01 -- 2009-08-01 
> # 2009-01-01 -- 2009-08-01 
> 
> start <- attr(span, "start")
> # "2009-01-01 UTC"
> end <- start + span
> # "2009-02-01 UTC"
> 
> 
> cleanEx()
> nameEx("new_period")
> ### * new_period
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: new_period
> ### Title: Create a period object.
> ### Aliases: new_period
> ### Keywords: chron classes
> 
> ### ** Examples
> new_period (second = 90, minute = 5)
[1] 5 minutes and 90 seconds 
> #  5 minutes and 90 seconds
> new_period(day = -1)
[1] -1 days
> # -1 days
> new_period(second = 3, minute = 1, hour = 2, day = 6, week = 1)
[1] 13 days, 2 hours, 1 minute and 3 seconds 
> # 13 days, 2 hours, 1 minute and 3 seconds
> new_period(hour = 1, minute = -60)
[1] 1 hour and -60 minutes 
> # 1 hour and -60 minutes
> new_period(second = 0)
[1] 0 seconds
> # 0 seconds
> 
> 
> cleanEx()
> nameEx("now")
> ### * now
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: now
> ### Title: The current time...
> ### Aliases: now
> ### Keywords: chron utilities
> 
> ### ** Examples
> now()
[1] "2011-01-04 13:40:31 CST"
> now("GMT")
[1] "2011-01-04 19:40:31 GMT"
> now() == now() # would be true if computer processed both at the same instant
[1] TRUE
> now() < now() # TRUE
[1] FALSE
> now() > now() # FALSE
[1] FALSE
> 
> 
> cleanEx()
> nameEx("origin")
> ### * origin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: origin
> ### Title: 1970-01-01 GMT...
> ### Aliases: origin
> ### Keywords: data chron
> 
> ### ** Examples
> origin
[1] "1970-01-01 UTC"
> # "1970-01-01 GMT"
> 
> 
> cleanEx()
> nameEx("parse_date")
> ### * parse_date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parse_date
> ### Title: Change dates into a POSIXct format...
> ### Aliases: parse_date
> ### Keywords: chron
> 
> ### ** Examples
> x <- c("09-01-01", "09-01-02", "09-01-03")
> parse_date(x, c("%y", "%m", "%d"), seps = "-")
Using date format %y-%m-%d.
[1] "2009-01-01 UTC" "2009-01-02 UTC" "2009-01-03 UTC"
> #  "2009-01-01 UTC" "2009-01-02 UTC" "2009-01-03 UTC"
> ymd(x)
Multiple format matches with 3 successes: %y-%m-%d, %Y-%m-%d.
Using date format %y-%m-%d.
[1] "2009-01-01 UTC" "2009-01-02 UTC" "2009-01-03 UTC"
> #  "2009-01-01 UTC" "2009-01-02 UTC" "2009-01-03 UTC"
> 
> 
> cleanEx()
> nameEx("pretty.dates")
> ### * pretty.dates
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pretty.dates
> ### Title: Computes attractive axis breaks for date-time data...
> ### Aliases: pretty.dates pretty.unit pretty.sec pretty.min pretty.hour
> ###   pretty.day pretty.month pretty.year pretty.point
> ### Keywords: dplot utilities chron
> 
> ### ** Examples
> x <- seq.Date(as.Date("2009-08-02"), by = "year", length.out = 2)
> # "2009-08-02" "2010-08-02"
> pretty.dates(x, 12)
 [1] "2009-08-01 UTC" "2009-09-01 UTC" "2009-10-01 UTC" "2009-11-01 UTC"
 [5] "2009-12-01 UTC" "2010-01-01 UTC" "2010-02-01 UTC" "2010-03-01 UTC"
 [9] "2010-04-01 UTC" "2010-05-01 UTC" "2010-06-01 UTC" "2010-07-01 UTC"
[13] "2010-08-01 UTC" "2010-09-01 UTC"
> #"2009-08-01 GMT" "2009-09-01 GMT" "2009-10-01 GMT" "2009-11-01 GMT" "2009-12-01 GMT" "2010-01-01 GMT" "2010-02-01 GMT" "2010-03-01 GMT" "2010-04-01 GMT" "2010-05-01 GMT" "2010-06-01 GMT" "2010-07-01 GMT" "2010-08-01 GMT" "2010-09-01 GMT"
> 
> 
> cleanEx()
> nameEx("round_date")
> ### * round_date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: round_date
> ### Title: Rounding for date-times.
> ### Aliases: round_date
> ### Keywords: manip chron
> 
> ### ** Examples
> x <- as.POSIXct("2009-08-03 12:01:59.23")
> round_date(x, "second")
[1] "2009-08-03 12:01:59 CDT"
> # "2009-08-03 12:01:59 CDT"
> round_date(x, "minute")
[1] "2009-08-03 12:02:00 CDT"
> # "2009-08-03 12:02:00 CDT"
> round_date(x, "hour")
[1] "2009-08-03 12:00:00 CDT"
> # "2009-08-03 12:00:00 CDT"
> round_date(x, "day")
[1] "2009-08-04 CDT"
> # "2009-08-04 CDT"
> round_date(x, "week")
[1] "2009-08-02 CDT"
> # "2009-08-02 CDT"
> round_date(x, "month")
[1] "2009-08-01 CDT"
> # "2009-08-01 CDT"
> round_date(x, "year")
[1] "2010-01-01 CST"
> # "2010-01-01 CST"
> 
> 
> cleanEx()
> nameEx("second")
> ### * second
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: second
> ### Title: Get/set seconds component of a date-time.
> ### Aliases: second second<-
> ### Keywords: utilities manip chron methods
> 
> ### ** Examples
> x <- now()
> second(x)
[1] 32
> second(x) <- 1
> second(x) <- 61 
> second(x) > 2
[1] FALSE
> 
> 
> cleanEx()
> nameEx("seconds")
> ### * seconds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: seconds
> ### Title: Quickly create relative timespans.
> ### Aliases: seconds minutes hours days weeks years y m w d milliseconds
> ###   microseconds microseconds nanoseconds picoseconds
> ### Keywords: chron manip
> 
> ### ** Examples
> x <- as.POSIXct("2009-08-03") 
> # "2009-08-03 CDT"
> x + days(1) + hours(6) + minutes(30)
[1] "2009-08-04 06:30:00 CDT"
> # "2009-08-04 06:30:00 CDT"
> x + days(100) - hours(8) 
[1] "2009-11-10 16:00:00 CST"
> # "2009-11-10 15:00:00 CST"
> 
> class(as.Date("2009-08-09") + days(1)) # retains Date class
[1] "Date"
> # "Date"
> as.Date("2009-08-09") + hours(12) 
[1] "2009-08-09 12:00:00 UTC"
> # "2009-08-09 12:00:00 UTC"
> class(as.Date("2009-08-09") + hours(12)) 
[1] "POSIXlt" "POSIXt" 
> # "POSIXt"  "POSIXct"
> # converts to POSIXt class to accomodate time units
> 
> years(1) - months(7) 
[1] 1 year and -7 months 
> # 1 year and -7 months
> c(1:3) * hours(1) 
[1] 1 hour  2 hours 3 hours
> # 1 hour   2 hours   3 hours
> hours(1:3)
[1] 1 hour  2 hours 3 hours
> # 1 hour   2 hours   3 hours
> 
> #sequencing
> y <- ymd(090101) # "2009-01-01 CST"
> y + months(0:11)
 [1] "2009-01-01 UTC" "2009-02-01 UTC" "2009-03-01 UTC" "2009-04-01 UTC"
 [5] "2009-05-01 UTC" "2009-06-01 UTC" "2009-07-01 UTC" "2009-08-01 UTC"
 [9] "2009-09-01 UTC" "2009-10-01 UTC" "2009-11-01 UTC" "2009-12-01 UTC"
> # [1] "2009-01-01 CST" "2009-02-01 CST" "2009-03-01 CST" "2009-04-01 CDT"
> # [5] "2009-05-01 CDT" "2009-06-01 CDT" "2009-07-01 CDT" "2009-08-01 CDT"
> # [9] "2009-09-01 CDT" "2009-10-01 CDT" "2009-11-01 CDT" "2009-12-01 CST"
> 
> # end of month handling
> ymd(20090131) + months(0:11)
 [1] "2009-01-31 UTC" "2009-03-03 UTC" "2009-03-31 UTC" "2009-05-01 UTC"
 [5] "2009-05-31 UTC" "2009-07-01 UTC" "2009-07-31 UTC" "2009-08-31 UTC"
 [9] "2009-10-01 UTC" "2009-10-31 UTC" "2009-12-01 UTC" "2009-12-31 UTC"
> # Undefined date. Defaulting to last previous real day.
> # [1] "2009-01-31 CST" "2009-02-28 CST" "2009-03-31 CDT" "2009-04-30 CDT"
> # [5] "2009-05-31 CDT" "2009-06-30 CDT" "2009-07-31 CDT" "2009-08-31 CDT"
> # [9] "2009-09-30 CDT" "2009-10-31 CDT" "2009-11-30 CST" "2009-12-31 CST"
> 
> # compare DST handling to durations
> boundary <- as.POSIXct("2009-03-08 01:59:59")
> # "2009-03-08 01:59:59 CST"
> boundary + days(1) # period
[1] "2009-03-09 01:59:59 CDT"
> # "2009-03-09 01:59:59 CDT" (clock time advances by a day)
> boundary + edays(1) # duration
[1] "2009-03-09 02:59:59 CDT"
> # "2009-03-09 02:59:59 CDT" (clock time corresponding to 86400 seconds later)
> 
> 
> cleanEx()
> nameEx("today")
> ### * today
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: today
> ### Title: The current date...
> ### Aliases: today
> ### Keywords: chron utilities
> 
> ### ** Examples
> today()
[1] "2011-01-04"
> today("GMT")
[1] "2011-01-04"
> today() == today("GMT") # not always true
[1] TRUE
> today() < as.Date("2999-01-01") # TRUE  (so far)
[1] TRUE
> 
> 
> cleanEx()
> nameEx("tz")
> ### * tz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tz
> ### Title: Get/set time zone component of a date-time.
> ### Aliases: tz tz<-
> ### Keywords: utilities manip chron methods
> 
> ### ** Examples
> x <- now()
> tz(x) 
[1] ""
> tz(x) <- "GMT"  
> x
[1] "2011-01-04 13:40:32 GMT"
> tz(x) <- "America/New_York"
> x
[1] "2011-01-04 13:40:32 EST"
> Sys.setenv(TZ = "GMT")
> x
[1] "2011-01-04 13:40:32 EST"
> tz(x)
[1] "America/New_York"
> Sys.unsetenv("TZ")
> 
> 
> cleanEx()
> nameEx("wday")
> ### * wday
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wday
> ### Title: Get/set days component of a date-time.
> ### Aliases: wday wday<-
> ### Keywords: utilities manip chron methods
> 
> ### ** Examples
> x <- as.Date("2009-09-02")
> wday(x) #4
[1] 4
> 
> wday(ymd(080101))
[1] 3
> # 3
> wday(ymd(080101), label = TRUE)
[1] Tues
Levels: Sun < Mon < Tues < Wed < Thurs < Fri < Sat
> # "Tuesday"
> wday(ymd(080101), label = TRUE, abbr = TRUE)
[1] Tues
Levels: Sun < Mon < Tues < Wed < Thurs < Fri < Sat
> # "Tues"
> wday(ymd(080101) + days(-2:4), label = TRUE, abbr = TRUE)
[1] Sun   Mon   Tues  Wed   Thurs Fri   Sat  
Levels: Sun < Mon < Tues < Wed < Thurs < Fri < Sat
> # "Sun"   "Mon"   "Tues"  "Wed"   "Thurs" "Fri"   "Sat"
> 
> 
> cleanEx()
> nameEx("week")
> ### * week
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: week
> ### Title: Get/set weeks component of a date-time.
> ### Aliases: week week<-
> ### Keywords: utilities manip chron
> 
> ### ** Examples
> x <- now()
> week(x) 
[1] 1
> week(x) <- 1  
> week(x) <- 54
> week(x) > 3
[1] FALSE
> 
> 
> cleanEx()
> nameEx("with_tz")
> ### * with_tz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: with_tz
> ### Title: Get date-time in a different time zone...
> ### Aliases: with_tz
> ### Keywords: chron manip
> 
> ### ** Examples
> x <- as.POSIXct("2009-08-07 00:00:01", tz = "America/New_york")
> with_tz(x, "GMT")
[1] "2009-08-07 04:00:01 GMT"
> # "2009-08-07 04:00:01 GMT"
> 
> 
> cleanEx()
> nameEx("yday")
> ### * yday
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: yday
> ### Title: Get/set days component of a date-time.
> ### Aliases: day yday mday day<- yday<- mday<-
> ### Keywords: utilities manip chron methods
> 
> ### ** Examples
> x <- as.Date("2009-09-02")
> yday(x) #245
[1] 245
> mday(x) #2
[1] 2
> yday(x) <- 1  #"2009-01-01"
> yday(x) <- 366 #"2010-01-01"
> mday(x) > 3
[1] FALSE
> 
> 
> cleanEx()
> nameEx("year")
> ### * year
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: year
> ### Title: Get/set years component of a date-time.
> ### Aliases: year year<-
> ### Keywords: utilities manip chron methods
> 
> ### ** Examples
> x <- now()
> year(x) 
[1] 2011
> year(x) <- 2001  
> year(x) > 1995
[1] TRUE
> 
> 
> cleanEx()
> nameEx("ymd")
> ### * ymd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ymd
> ### Title: Parse dates according to the order that year, month, and day
> ###   elements
> ### Aliases: yearmonthdate ymd myd dym ydm mdy dmy
> ### Keywords: chron
> 
> ### ** Examples
> x <- c("09-01-01", "09-01-02", "09-01-03")
> ymd(x)
Multiple format matches with 3 successes: %y-%m-%d, %Y-%m-%d.
Using date format %y-%m-%d.
[1] "2009-01-01 UTC" "2009-01-02 UTC" "2009-01-03 UTC"
> # "2009-01-01 UTC" "2009-01-02 UTC" "2009-01-03 UTC"
> z <- c("2009-01-01", "2009-01-02", "2009-01-03")
> ymd(z)
Using date format %Y-%m-%d.
[1] "2009-01-01 UTC" "2009-01-02 UTC" "2009-01-03 UTC"
> # "2009-01-01 UTC" "2009-01-02 UTC" "2009-01-03 UTC"
> ymd(090101)
[1] "2009-01-01 UTC"
> # "2009-01-01 UTC"
> ymd(90101)
[1] "2009-01-01 UTC"
> # "2009-01-01 UTC"
> now() > ymd(20090101) 
[1] TRUE
> # TRUE
> dmy(010210)
Multiple format matches with 1 successes: %d%m%y, %d%m%Y.
[1] "2010-02-01 UTC"
> mdy(010210)
Multiple format matches with 1 successes: %m%d%y, %m%d%Y.
[1] "2010-01-02 UTC"
> 
> 
> cleanEx()
> nameEx("ymd_hms")
> ### * ymd_hms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ymd_hms
> ### Title: Parse dates that have hours, minutes, or seconds elements...
> ### Aliases: ymd_hms ymd_hm ymd_h dmy_hms dmy_hm dmy_h mdy_hms mdy_hm mdy_h
> ###   ydm_hms ydm_hm ydm_h
> ### Keywords: POSIXt parse
> 
> ### ** Examples
> x <- c("2010-04-14-04-35-59", "2010-04-01-12-00-00")
> ymd_hms(x)
[1] "2010-04-14 04:35:59 UTC" "2010-04-01 12:00:00 UTC"
> # [1] "2010-04-14 04:35:59 UTC" "2010-04-01 12:00:00 UTC"
> y <- c("2011-12-31 12:59:59", "2010-01-01 12:00:00")
> ymd_hms(y)
[1] "2011-12-31 12:59:59 UTC" "2010-01-01 12:00:00 UTC"
> # [1] "2011-12-31 12:59:59 UTC" "2010-01-01 12:00:00 UTC"
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.858 0.042 2.105 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
